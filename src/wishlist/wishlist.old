import logging
import re

from git import Repo

from . import constants as C

logger = logging.getLogger(__name__)

class Wishlist:
    """
    Wishlist is a collection of Wish objects
    Responsible for managing git state
    """
    def __init__(self, wishlist=C.wishlist, repopath=C.repo_path):
        self._r = C.wish_regex
        self.wishlist = wishlist
        self.wishes = []
        self.get_wishes()
        #self._init_wishlist()
        self.repo = Repo(repopath)
        #self._r = re.compile("^##\s+(.*)$")

    def get_wishes(self):
        """
        click command 'ls'
        Returns list of wishes
        """
        self.wishes.clear()
        with open(C.wishlist, 'r') as wl:
            for line in wl:
                m = self._r.match(line)
                if m:
                    self.wishes.append(m.groups()[0].strip())

#    def get_wish(self, wishname):
#        """
#        Returns raw markdown text representation of `wishname`
#        or None if wishname doesn't exist
#        """
#        logger.debug(f"Getting block for wish '{wishname}'...")
#        if not self.wish_exists(wishname):
#            logger.warning(f"No such wish: {wishname} - try wish make {wishname} to create")
#            #click.echo(f"No such wish: {wish} - try wish make {wish} to create")
#            return None
#        w = Wish(wishname)
#        return w.block
#
#    def del_wish(self, wishname, commit_message="", push=True) -> bool:
#        """
#        Remove wish from list.
#        Returns True on success or None otherwise.
#        """
#        logger.debug(f"Deleting wish '{wishname}'...")
#        if not self.wish_exists(wishname):
#            logger.warning(f"Cannot remove wish '{wishname}': does not exist")
#            return None
#        w = Wish(wishname)
#        if not w.exists:
#            return False
#        w.del_wish()
##        # r=True is saying 'git rm -r'
##        self.repo.index.remove(C.skelpath + wish, r=True)
##        self.repo.index.add(C.wishlist)
##        self._commit(msg=f"Delete wish '{wish}'")
#
#        # not strictly necessary, as the program will exit shortly after del_wish() returns.
#        self.wishes.remove(wishname)
#        return True
#
#    def add_wish(self, wishname):
#        logger.debug(f"Adding new wish '{wishname}'...")
#        w = Wish(wishname)
#        w.create()
#        w.update(mdtext)
#        return True
#
#    def update_wish(self, wishname, mdtext):
#        logger.debug(f"Updating wish '{wishname}'...")
#        w = Wish(wishname)
#        w.update(mdtext)
#        return True
#
#    def wish_exists(self, wishname):
#        return True if wishname in self.wishes else False

    def _init_wishlist(self) -> bool:
        """
        Set wishes list
        """
        try:
            with open(C.wishlist, 'r') as wl:
                for line in wl:
                    if line.startswith("## "):
                        w = ''.join(line.strip().split(' ')[1:])
                        self.wishes.append(w)
        except FileNotFoundError:
            logger.error(f"Couldn't open wishlist at '{C.wishlist}'!")
            return False
        return True

#    def commit(self, wishname, msg='', push=False):
#        """
#        Commit changes to git and push
#        """
#        if msg == '':
#            msg = "Committing change..."
#            logger.warning(f"Using generic commit message...")
#        self.repo.index.add(str(C.wishlist))
#        self.repo.index.add(str(C.wish_readme(wishname)))
#        self.repo.index.commit(message=msg)
#        if push:
#            remote = self.repo.remote()
#            remote.push()
